{
  "name": "music-revenue-optimizer",
  "version": "1.0.0",
  "description": "AI-powered music distribution plan optimizer",
  "main": "index.js",
  "scripts": {
    "setup": "npm run setup-backend && npm run setup-frontend",
    "setup-backend": "cd backend && npm install",
    "setup-frontend": "cd frontend && npm install",
    "dev": "concurrently \"npm run dev-backend\" \"npm run dev-frontend\"",
    "dev-backend": "cd backend && npm run dev",
    "dev-frontend": "cd frontend && npm start",
    "build": "cd frontend && npm run build",
    "test": "cd backend && npm test",
    "deploy": "npm run build && npm run deploy-backend && npm run deploy-frontend"
  },
  "keywords": ["music", "streaming", "revenue", "optimization", "ai"],
  "author": "Your Name",
  "license": "MIT",
  "devDependencies": {
    "concurrently": "^8.2.0"
  }
}

// ============================================================================
// backend/package.json
// ============================================================================

{
  "name": "music-optimizer-backend",
  "version": "1.0.0",
  "description": "Backend API for Music Revenue Optimizer",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest --coverage",
    "test:watch": "jest --watch",
    "migrate": "node migrations/run.js",
    "seed": "node seeds/run.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "axios": "^1.6.0",
    "pg": "^8.11.0",
    "jsonwebtoken": "^9.0.2",
    "bcrypt": "^5.1.1",
    "dotenv": "^16.3.1",
    "helmet": "^7.1.0",
    "compression": "^1.7.4",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "@sendgrid/mail": "^8.1.0",
    "stripe": "^14.10.0",
    "redis": "^4.6.11",
    "@sentry/node": "^7.91.0",
    "swagger-ui-express": "^5.0.0",
    "swagger-jsdoc": "^6.2.8"
  },
  "devDependencies": {
    "nodemon": "^3.0.2",
    "jest": "^29.7.0",
    "supertest": "^6.3.3",
    "@types/jest": "^29.5.11"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

// ============================================================================
// frontend/package.json
// ============================================================================

{
  "name": "music-optimizer-frontend",
  "version": "1.0.0",
  "description": "Frontend for Music Revenue Optimizer",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "axios": "^1.6.0",
    "lucide-react": "^0.263.1",
    "react-router-dom": "^6.20.1",
    "@sentry/react": "^7.91.0",
    "posthog-js": "^1.96.1",
    "chart.js": "^4.4.1",
    "react-chartjs-2": "^5.2.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "analyze": "source-map-explorer 'build/static/js/*.js'"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@testing-library/react": "^13.4.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/user-event": "^13.5.0",
    "source-map-explorer": "^2.5.3",
    "tailwindcss": "^3.4.0"
  }
}

// ============================================================================
// .env.example (Backend)
// ============================================================================

# Server Configuration
PORT=3001
NODE_ENV=development
JWT_SECRET=your_super_secret_jwt_key_minimum_32_characters_long

# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_NAME=music_optimizer
DB_USER=postgres
DB_PASSWORD=your_postgres_password
DATABASE_URL=postgresql://postgres:password@localhost:5432/music_optimizer

# Spotify API
SPOTIFY_CLIENT_ID=your_spotify_client_id_from_dashboard
SPOTIFY_CLIENT_SECRET=your_spotify_client_secret_from_dashboard
SPOTIFY_REDIRECT_URI=http://localhost:3000/callback

# Frontend URL
FRONTEND_URL=http://localhost:3000

# Payment (Stripe)
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
STRIPE_PRICE_ID_PRO=price_1234567890
STRIPE_PRICE_ID_EXPERT=price_0987654321
STRIPE_PRICE_ID_LABEL=price_1122334455

# Email (SendGrid)
SENDGRID_API_KEY=SG.your_sendgrid_api_key

# Caching (Redis) - Optional
REDIS_URL=redis://localhost:6379

# Monitoring (Sentry) - Optional
SENTRY_DSN=https://your_sentry_dsn@sentry.io/project_id

# Analytics (PostHog) - Optional
POSTHOG_API_KEY=your_posthog_project_api_key

# ============================================================================
// .env.example (Frontend)
// ============================================================================

REACT_APP_API_URL=http://localhost:3001/api
REACT_APP_SPOTIFY_CLIENT_ID=your_spotify_client_id
REACT_APP_SENTRY_DSN=https://your_sentry_dsn@sentry.io/project_id
REACT_APP_POSTHOG_KEY=your_posthog_project_api_key
REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key

// ============================================================================
// .gitignore
// ============================================================================

# Dependencies
node_modules/
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build
/dist

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
logs/
*.log

# IDE
.idea/
.vscode/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Database
*.sql
*.sqlite
*.db

# Secrets
*.pem
*.key
*.cert

// ============================================================================
// docker-compose.yml (Optional - for local development)
// ============================================================================

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: music_optimizer_db
    environment:
      POSTGRES_DB: music_optimizer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: music_optimizer_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build: ./backend
    container_name: music_optimizer_api
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/music_optimizer
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    build: ./frontend
    container_name: music_optimizer_web
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

// ============================================================================
// README.md
// ============================================================================

# üé∏ Music Revenue Optimizer

AI-powered distribution plan recommendations for independent artists.

## üöÄ Quick Start

### Prerequisites
- Node.js 18+
- PostgreSQL 14+
- Spotify Developer Account

### Installation

1. **Clone the repository**
```bash
git clone https://github.com/yourusername/music-revenue-optimizer.git
cd music-revenue-optimizer
```

2. **Install dependencies**
```bash
npm run setup
```

3. **Setup environment variables**
```bash
# Backend
cp backend/.env.example backend/.env
# Edit backend/.env with your credentials

# Frontend
cp frontend/.env.example frontend/.env
# Edit frontend/.env with your credentials
```

4. **Start PostgreSQL**
```bash
# macOS
brew services start postgresql

# Linux
sudo systemctl start postgresql

# Docker
docker-compose up -d postgres
```

5. **Run the application**
```bash
npm run dev
```

Visit http://localhost:3000

## üìÅ Project Structure

```
music-revenue-optimizer/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ server.js           # Express server
‚îÇ   ‚îú‚îÄ‚îÄ routes/             # API routes
‚îÇ   ‚îú‚îÄ‚îÄ services/           # Business logic
‚îÇ   ‚îú‚îÄ‚îÄ middleware/         # Auth, validation
‚îÇ   ‚îî‚îÄ‚îÄ tests/              # Unit tests
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/       # API calls
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.jsx         # Main app
‚îÇ   ‚îî‚îÄ‚îÄ public/
‚îî‚îÄ‚îÄ docs/                   # Documentation
```

## üß™ Testing

```bash
# Backend tests
cd backend && npm test

# Frontend tests
cd frontend && npm test

# E2E tests (if configured)
npm run test:e2e
```

## üö¢ Deployment

See [DEPLOYMENT.md](./docs/DEPLOYMENT.md) for detailed deployment instructions.

## üìñ Documentation

- [API Documentation](http://localhost:3001/api-docs)
- [User Guide](./docs/USER_GUIDE.md)
- [Contributing](./CONTRIBUTING.md)

## ü§ù Contributing

We welcome contributions! Please see [CONTRIBUTING.md](./CONTRIBUTING.md)

## üìÑ License

MIT License - see [LICENSE](./LICENSE)

## üôè Acknowledgments

- Spotify for Artists API
- Independent music community
- All contributors

---

Made with ‚ù§Ô∏è for independent artists

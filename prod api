import React, { useState, useEffect } from 'react';
import { AlertCircle, TrendingUp, DollarSign, Music, BarChart3, CheckCircle, XCircle, Clock, Users, Zap, Target, Award } from 'lucide-react';

// ============================================================================
// SPOTIFY API INTEGRATION MODULE
// ============================================================================

const SpotifyAPI = {
  // In production: Use actual Spotify for Artists API
  // Documentation: https://developer.spotify.com/documentation/web-api
  
  async getArtistMetrics(accessToken) {
    // Simulated API call - replace with real endpoint
    // const response = await fetch('https://api.spotify.com/v1/me/player/recently-played', {
    //   headers: { 'Authorization': `Bearer ${accessToken}` }
    // });
    
    // Simulated data for demo
    return {
      monthly_streams: Math.floor(Math.random() * 500000) + 10000,
      monthly_listeners: Math.floor(Math.random() * 100000) + 5000,
      follower_count: Math.floor(Math.random() * 50000) + 1000,
      top_countries: ['US', 'UK', 'CA', 'AU', 'DE'].slice(0, Math.floor(Math.random() * 3) + 2),
      playlist_adds: Math.floor(Math.random() * 5000) + 100,
      avg_completion_rate: (Math.random() * 0.5 + 0.4).toFixed(2),
      skip_rate: (Math.random() * 0.3 + 0.1).toFixed(2),
    };
  },

  async authenticateUser() {
    // Simulated OAuth flow - in production use real Spotify OAuth
    // window.location.href = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=code&redirect_uri=${REDIRECT_URI}&scope=user-read-recently-played`;
    return 'simulated_access_token_' + Date.now();
  }
};

// ============================================================================
// DISTRIBUTION PLANS DATABASE
// ============================================================================

const DISTRIBUTION_PLANS = [
  {
    id: 'distrokid-free',
    name: "Free Tier",
    provider: "DistroKid",
    annual_cost: 0,
    rev_share_pct: 85,
    features: ["Basic distribution", "Limited analytics"],
    best_for: "emerging",
    color: "gray"
  },
  {
    id: 'distrokid-musician',
    name: "Musician",
    provider: "DistroKid",
    annual_cost: 22.99,
    rev_share_pct: 100,
    features: ["Unlimited uploads", "Keep 100%", "Basic analytics", "Spotify pre-save"],
    best_for: "emerging",
    color: "blue"
  },
  {
    id: 'tunecore-pro',
    name: "Professional",
    provider: "TuneCore",
    annual_cost: 49.99,
    rev_share_pct: 100,
    features: ["Unlimited uploads", "Advanced analytics", "YouTube monetization", "Daily trend reports"],
    best_for: "growing",
    color: "purple"
  },
  {
    id: 'cdbaby-rising',
    name: "Rising",
    provider: "CD Baby",
    annual_cost: 29.95,
    rev_share_pct: 91,
    features: ["Distribution", "Publishing admin", "Sync licensing opportunities"],
    best_for: "niche",
    color: "green"
  },
  {
    id: 'awal-label',
    name: "Label Services",
    provider: "AWAL",
    annual_cost: 0,
    rev_share_pct: 85,
    features: ["Full service", "Marketing support", "Advance opportunities", "Dedicated A&R"],
    best_for: "established",
    color: "orange"
  },
  {
    id: 'stem-premium',
    name: "Premium",
    provider: "Stem",
    annual_cost: 99.99,
    rev_share_pct: 100,
    features: ["Advanced splits", "Real-time analytics", "Financial tools", "Tax support"],
    best_for: "established",
    color: "pink"
  }
];

// ============================================================================
// RECOMMENDATION ENGINE
// ============================================================================

const RecommendationEngine = {
  analyzeArtist(metrics, context) {
    const streams = metrics.monthly_streams;
    const engagement = parseFloat(metrics.avg_completion_rate) * 100;
    const followers = metrics.follower_count;
    
    // Detect archetype
    let archetype, confidence;
    if (streams < 10000) {
      archetype = followers < 1000 ? "emerging" : "niche";
      confidence = 0.85;
    } else if (streams < 50000) {
      archetype = engagement > 60 ? "growing" : "niche";
      confidence = 0.80;
    } else if (streams < 200000) {
      archetype = followers > 10000 ? "established" : "growing";
      confidence = 0.90;
    } else {
      archetype = "established";
      confidence = 0.95;
    }
    
    const profile = {
      archetype,
      confidence,
      monthly_revenue: streams * 0.003,
      engagement_score: engagement,
      geographic_reach: metrics.top_countries.length > 3 ? "international" : "regional"
    };
    
    // Score each plan
    const scoredPlans = DISTRIBUTION_PLANS.map(plan => {
      let score = 0;
      
      // Archetype match (40 points)
      if (plan.best_for === archetype) score += 40;
      
      // ROI calculation (30 points)
      const annual_revenue = profile.monthly_revenue * 12;
      const net_revenue = (annual_revenue * plan.rev_share_pct / 100) - plan.annual_cost;
      if (net_revenue > 0) {
        const roi = net_revenue / Math.max(annual_revenue, 1);
        score += 30 * roi;
      }
      
      // Context adjustments (30 points)
      if (context.budget && plan.annual_cost <= context.budget) score += 10;
      if (context.goals.includes('revenue_max') && plan.rev_share_pct === 100) score += 10;
      if (context.goals.includes('sync_licensing') && plan.features.some(f => f.toLowerCase().includes('sync'))) score += 10;
      
      return { plan, score: Math.min(score, 100), net_revenue, annual_revenue };
    });
    
    scoredPlans.sort((a, b) => b.score - a.score);
    
    return {
      profile,
      recommended: scoredPlans[0],
      alternatives: scoredPlans.slice(1, 3),
      needsExpertReview: confidence < 0.70 || scoredPlans[0].score < 70
    };
  }
};

// ============================================================================
// MAIN APP COMPONENT
// ============================================================================

export default function MusicRevenueOptimizer() {
  const [step, setStep] = useState('welcome'); // welcome, auth, context, analysis, results
  const [spotifyData, setSpotifyData] = useState(null);
  const [userContext, setUserContext] = useState({
    goals: [],
    budget: null,
    upcomingReleases: 2
  });
  const [recommendation, setRecommendation] = useState(null);
  const [loading, setLoading] = useState(false);

  // Handle Spotify authentication
  const handleSpotifyAuth = async () => {
    setLoading(true);
    try {
      const token = await SpotifyAPI.authenticateUser();
      const metrics = await SpotifyAPI.getArtistMetrics(token);
      setSpotifyData(metrics);
      setStep('context');
    } catch (error) {
      console.error('Auth failed:', error);
    }
    setLoading(false);
  };

  // Handle context submission
  const handleContextSubmit = () => {
    setLoading(true);
    setTimeout(() => {
      const result = RecommendationEngine.analyzeArtist(spotifyData, userContext);
      setRecommendation(result);
      setStep('results');
      setLoading(false);
    }, 1500);
  };

  // Toggle goal selection
  const toggleGoal = (goal) => {
    setUserContext(prev => ({
      ...prev,
      goals: prev.goals.includes(goal) 
        ? prev.goals.filter(g => g !== goal)
        : [...prev.goals, goal]
    }));
  };

  // ============================================================================
  // RENDER: WELCOME SCREEN
  // ============================================================================
  
  if (step === 'welcome') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-6">
        <div className="max-w-2xl w-full bg-white/10 backdrop-blur-lg rounded-3xl p-12 shadow-2xl border border-white/20">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-6">
              <div className="bg-gradient-to-r from-purple-500 to-pink-500 p-4 rounded-2xl">
                <Music className="w-16 h-16 text-white" />
              </div>
            </div>
            <h1 className="text-5xl font-bold text-white mb-4">
              Music Revenue Optimizer
            </h1>
            <p className="text-xl text-blue-100 mb-8">
              Democratizing streaming revenue through AI-powered distribution matching
            </p>
          </div>

          <div className="space-y-6 mb-8">
            <div className="flex items-start space-x-4 bg-white/5 p-4 rounded-xl">
              <Target className="w-6 h-6 text-green-400 flex-shrink-0 mt-1" />
              <div>
                <h3 className="text-white font-semibold mb-1">Smart Analysis</h3>
                <p className="text-blue-200 text-sm">AI analyzes your streaming data to find patterns</p>
              </div>
            </div>
            <div className="flex items-start space-x-4 bg-white/5 p-4 rounded-xl">
              <Zap className="w-6 h-6 text-yellow-400 flex-shrink-0 mt-1" />
              <div>
                <h3 className="text-white font-semibold mb-1">Personalized Recommendations</h3>
                <p className="text-blue-200 text-sm">Get matched to the perfect distribution plan for YOU</p>
              </div>
            </div>
            <div className="flex items-start space-x-4 bg-white/5 p-4 rounded-xl">
              <DollarSign className="w-6 h-6 text-green-400 flex-shrink-0 mt-1" />
              <div>
                <h3 className="text-white font-semibold mb-1">Maximize Revenue</h3>
                <p className="text-blue-200 text-sm">Stop losing money to suboptimal distribution plans</p>
              </div>
            </div>
          </div>

          <button
            onClick={() => setStep('auth')}
            className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 rounded-xl font-semibold text-lg hover:from-green-600 hover:to-emerald-700 transition-all transform hover:scale-105 shadow-lg"
          >
            Get Started - It's Free
          </button>
          
          <p className="text-center text-blue-200 text-sm mt-6">
            Used by 10,000+ independent artists • Avg savings: $340/year
          </p>
        </div>
      </div>
    );
  }

  // ============================================================================
  // RENDER: AUTH SCREEN
  // ============================================================================
  
  if (step === 'auth') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-6">
        <div className="max-w-md w-full bg-white rounded-3xl p-8 shadow-2xl">
          <div className="text-center mb-8">
            <Music className="w-16 h-16 text-purple-600 mx-auto mb-4" />
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Connect Your Music</h2>
            <p className="text-gray-600">We'll analyze your streaming data to give you personalized recommendations</p>
          </div>

          <div className="space-y-4 mb-8">
            <button
              onClick={handleSpotifyAuth}
              disabled={loading}
              className="w-full bg-green-500 text-white py-4 rounded-xl font-semibold text-lg hover:bg-green-600 transition-all flex items-center justify-center space-x-3 disabled:opacity-50"
            >
              {loading ? (
                <>
                  <Clock className="w-5 h-5 animate-spin" />
                  <span>Connecting...</span>
                </>
              ) : (
                <>
                  <Music className="w-5 h-5" />
                  <span>Connect with Spotify for Artists</span>
                </>
              )}
            </button>

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-300"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="px-4 bg-white text-gray-500">or</span>
              </div>
            </div>

            <button className="w-full border-2 border-gray-300 text-gray-700 py-4 rounded-xl font-semibold hover:border-gray-400 transition-all">
              Upload CSV Manually
            </button>
          </div>

          <div className="bg-blue-50 rounded-xl p-4 border border-blue-200">
            <div className="flex items-start space-x-3">
              <AlertCircle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <div className="text-sm text-blue-800">
                <p className="font-semibold mb-1">Your data is secure</p>
                <p>We only read streaming metrics. We never access or share your personal information.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // RENDER: CONTEXT COLLECTION
  // ============================================================================
  
  if (step === 'context') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-6">
        <div className="max-w-3xl mx-auto">
          <div className="bg-white rounded-3xl p-8 shadow-2xl mb-6">
            <h2 className="text-3xl font-bold text-gray-900 mb-2">Tell us about your goals</h2>
            <p className="text-gray-600 mb-8">This helps us personalize recommendations beyond just the numbers</p>

            {/* Goals Selection */}
            <div className="mb-8">
              <label className="block text-sm font-semibold text-gray-700 mb-4">
                What are your main goals? (Select all that apply)
              </label>
              <div className="grid grid-cols-2 gap-3">
                {[
                  { id: 'revenue_max', label: 'Maximize Revenue', icon: DollarSign },
                  { id: 'fanbase_growth', label: 'Grow Fanbase', icon: Users },
                  { id: 'sync_licensing', label: 'Sync Licensing', icon: Music },
                  { id: 'touring_prep', label: 'Prepare for Tour', icon: TrendingUp }
                ].map(goal => {
                  const Icon = goal.icon;
                  const isSelected = userContext.goals.includes(goal.id);
                  return (
                    <button
                      key={goal.id}
                      onClick={() => toggleGoal(goal.id)}
                      className={`p-4 rounded-xl border-2 transition-all flex items-center space-x-3 ${
                        isSelected 
                          ? 'border-purple-500 bg-purple-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <Icon className={`w-5 h-5 ${isSelected ? 'text-purple-600' : 'text-gray-400'}`} />
                      <span className={`font-medium ${isSelected ? 'text-purple-900' : 'text-gray-700'}`}>
                        {goal.label}
                      </span>
                    </button>
                  );
                })}
              </div>
            </div>

            {/* Budget */}
            <div className="mb-8">
              <label className="block text-sm font-semibold text-gray-700 mb-4">
                What's your annual budget for distribution?
              </label>
              <div className="grid grid-cols-4 gap-3">
                {[
                  { value: null, label: 'Flexible' },
                  { value: 50, label: '$0-50' },
                  { value: 100, label: '$50-100' },
                  { value: 200, label: '$100+' }
                ].map(option => (
                  <button
                    key={option.label}
                    onClick={() => setUserContext(prev => ({ ...prev, budget: option.value }))}
                    className={`py-3 px-4 rounded-xl border-2 font-medium transition-all ${
                      userContext.budget === option.value
                        ? 'border-purple-500 bg-purple-50 text-purple-900'
                        : 'border-gray-200 text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Upcoming Releases */}
            <div className="mb-8">
              <label className="block text-sm font-semibold text-gray-700 mb-4">
                How many releases do you plan in the next 6 months?
              </label>
              <input
                type="range"
                min="0"
                max="12"
                value={userContext.upcomingReleases}
                onChange={(e) => setUserContext(prev => ({ ...prev, upcomingReleases: parseInt(e.target.value) }))}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <div className="flex justify-between text-sm text-gray-600 mt-2">
                <span>0</span>
                <span className="font-semibold text-purple-600">{userContext.upcomingReleases} releases</span>
                <span>12+</span>
              </div>
            </div>

            <button
              onClick={handleContextSubmit}
              disabled={userContext.goals.length === 0 || loading}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 rounded-xl font-semibold text-lg hover:from-purple-700 hover:to-pink-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Analyzing...' : 'Get My Recommendation'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  // ============================================================================
  // RENDER: RESULTS SCREEN
  // ============================================================================
  
  if (step === 'results' && recommendation) {
    const { profile, recommended, alternatives, needsExpertReview } = recommendation;
    const topPlan = recommended.plan;

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-white mb-2">Your Personalized Recommendation</h1>
            <p className="text-blue-200">Based on your streaming data and goals</p>
          </div>

          {/* Profile Summary */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="flex items-center justify-between mb-2">
                <span className="text-blue-200 text-sm">Monthly Streams</span>
                <TrendingUp className="w-5 h-5 text-green-400" />
              </div>
              <p className="text-3xl font-bold text-white">{spotifyData.monthly_streams.toLocaleString()}</p>
            </div>
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="flex items-center justify-between mb-2">
                <span className="text-blue-200 text-sm">Archetype</span>
                <Award className="w-5 h-5 text-purple-400" />
              </div>
              <p className="text-2xl font-bold text-white capitalize">{profile.archetype}</p>
            </div>
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="flex items-center justify-between mb-2">
                <span className="text-blue-200 text-sm">Monthly Revenue</span>
                <DollarSign className="w-5 h-5 text-green-400" />
              </div>
              <p className="text-3xl font-bold text-white">${profile.monthly_revenue.toFixed(0)}</p>
            </div>
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="flex items-center justify-between mb-2">
                <span className="text-blue-200 text-sm">Confidence</span>
                <BarChart3 className="w-5 h-5 text-blue-400" />
              </div>
              <p className="text-3xl font-bold text-white">{(profile.confidence * 100).toFixed(0)}%</p>
            </div>
          </div>

          {/* Expert Review Alert */}
          {needsExpertReview && (
            <div className="bg-yellow-500/20 backdrop-blur-lg border border-yellow-500/50 rounded-2xl p-6 mb-8">
              <div className="flex items-start space-x-4">
                <AlertCircle className="w-6 h-6 text-yellow-300 flex-shrink-0 mt-1" />
                <div>
                  <h3 className="text-yellow-100 font-semibold text-lg mb-2">Expert Review Recommended</h3>
                  <p className="text-yellow-200 mb-4">
                    Our algorithm flagged your profile for expert review to ensure the best recommendation. 
                    Upgrade to Expert tier for human validation.
                  </p>
                  <button className="bg-yellow-500 text-gray-900 px-6 py-2 rounded-lg font-semibold hover:bg-yellow-400 transition-all">
                    Get Expert Review ($49/mo)
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Recommended Plan */}
          <div className="bg-gradient-to-br from-green-500 to-emerald-600 rounded-3xl p-8 mb-8 shadow-2xl relative overflow-hidden">
            <div className="absolute top-0 right-0 w-64 h-64 bg-white/10 rounded-full -mr-32 -mt-32"></div>
            <div className="relative z-10">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <p className="text-green-100 text-sm font-semibold mb-1">RECOMMENDED FOR YOU</p>
                  <h2 className="text-4xl font-bold text-white mb-2">{topPlan.provider} - {topPlan.name}</h2>
                  <p className="text-green-100">Match Score: {recommended.score.toFixed(0)}%</p>
                </div>
                <div className="text-right">
                  <p className="text-green-100 text-sm mb-1">Annual Cost</p>
                  <p className="text-5xl font-bold text-white">${topPlan.annual_cost}</p>
                  <p className="text-green-100 text-sm mt-1">Keep {topPlan.rev_share_pct}% of revenue</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-6">
                <div>
                  <h3 className="text-white font-semibold mb-4 text-lg">Features:</h3>
                  <ul className="space-y-2">
                    {topPlan.features.map((feature, i) => (
                      <li key={i} className="flex items-start space-x-3">
                        <CheckCircle className="w-5 h-5 text-white flex-shrink-0 mt-0.5" />
                        <span className="text-green-50">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h3 className="text-white font-semibold mb-4 text-lg">Annual Projection:</h3>
                  <div className="bg-white/20 backdrop-blur-sm rounded-xl p-4 space-y-3">
                    <div className="flex justify-between">
                      <span className="text-green-100">Gross Revenue:</span>
                      <span className="text-white font-semibold">${recommended.annual_revenue.toFixed(0)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-green-100">Platform Fee:</span>
                      <span className="text-white font-semibold">-${((recommended.annual_revenue * (1 - topPlan.rev_share_pct/100))).toFixed(0)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-green-100">Distribution Cost:</span>
                      <span className="text-white font-semibold">-${topPlan.annual_cost}</span>
                    </div>
                    <div className="border-t border-white/30 pt-3 flex justify-between">
                      <span className="text-white font-bold text-lg">Net Revenue:</span>
                      <span className="text-white font-bold text-lg">${recommended.net_revenue.toFixed(0)}</span>
                    </div>
                  </div>
                </div>
              </div>

              <button className="w-full bg-white text-green-600 py-4 rounded-xl font-bold text-lg hover:bg-green-50 transition-all shadow-lg">
                Switch to {topPlan.provider} →
              </button>
            </div>
          </div>

          {/* Alternative Options */}
          <h3 className="text-2xl font-bold text-white mb-4">Alternative Options</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {alternatives.map((alt, i) => (
              <div key={i} className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h4 className="text-xl font-bold text-white">{alt.plan.provider} - {alt.plan.name}</h4>
                    <p className="text-blue-200 text-sm">Match Score: {alt.score.toFixed(0)}%</p>
                  </div>
                  <div className="text-right">
                    <p className="text-2xl font-bold text-white">${alt.plan.annual_cost}</p>
                    <p className="text-blue-200 text-sm">per year</p>
                  </div>
                </div>
                <ul className="space-y-2 mb-4">
                  {alt.plan.features.slice(0, 3).map((feature, j) => (
                    <li key={j} className="flex items-center space-x-2 text-blue-100 text-sm">
                      <CheckCircle className="w-4 h-4" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
                <p className="text-green-300 font-semibold">Net: ${alt.net_revenue.toFixed(0)}/year</p>
              </div>
            ))}
          </div>

          {/* CTA */}
          <div className="mt-12 bg-white rounded-3xl p-8 text-center">
            <h3 className="text-3xl font-bold text-gray-900 mb-4">Want ongoing optimization?</h3>
            <p className="text-gray-600 mb-6">Track your growth and get updated recommendations as your career evolves</p>
            <div className="flex justify-center space-x-4">
              <button className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-4 rounded-xl font-semibold hover:from-purple-700 hover:to-pink-700 transition-all">
                Upgrade to Pro - $19/mo
              </button>
              <button className="border-2 border-gray-300 text-gray-700 px-8 py-4 rounded-xl font-semibold hover:border-gray-400 transition-all">
                Download Report (PDF)
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return null;
}
